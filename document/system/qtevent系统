qWindowsWndProc
extern "C" LRESULT QT_WIN_CALLBACK qWindowsWndProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    LRESULT result;
    const QtWindows::WindowsEventType et = windowsEventType(message, wParam, lParam);
    QWindowsWindow *platformWindow = nullptr;
    const RECT ncCalcSizeFrame = rectFromNcCalcSize(message, wParam, lParam, 0);
    const bool handled = QWindowsContext::instance()->windowsProc(hwnd, message, et, wParam, lParam, &result, &platformWindow);
    if (QWindowsContext::verbose > 1 && lcQpaEvents().isDebugEnabled()) {
        if (const char *eventName = QWindowsGuiEventDispatcher::windowsMessageName(message)) {
            qCDebug(lcQpaEvents).nospace() << "EVENT: hwd=" << hwnd << ' ' << eventName
                << " msg=0x" << hex << message << " et=0x" << et << dec << " wp="
                << int(wParam) << " at " << GET_X_LPARAM(lParam) << ','
                << GET_Y_LPARAM(lParam) << " handled=" << handled;
        }
    }
    if (!handled)
        result = DefWindowProc(hwnd, message, wParam, lParam);
    //...
}




QWindowSystemInterfacePrivate::TouchEvent

  class TouchEvent : public InputEvent
  InputEvent: public UserEvent 
   class UserEvent : public WindowSystemEvent



QWindowSystemInterface::handleTouchEvent
   QWindowSystemInterfacePrivate::handleWindowSystemEvent



   bool QWindowSystemInterfacePrivate::handleWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent *ev)
{
    bool accepted = true;
    if (synchronousWindowSystemEvents) {
        if (QThread::currentThread() == QGuiApplication::instance()->thread()) {
            // Process the event immediately on the current thread and return the accepted state.
            QGuiApplicationPrivate::processWindowSystemEvent(ev);
            accepted = ev->eventAccepted;
            delete ev;
        } else {
            // Post the event on the Qt main thread queue and flush the queue.
            // This will wake up the Gui thread which will process the event.
            // Return the accepted state for the last event on the queue,
            // which is the event posted by this function.
            postWindowSystemEvent(ev);
            accepted = QWindowSystemInterface::flushWindowSystemEvents();
        }
    } else {
        postWindowSystemEvent(ev);
    }
    return accepted;
}


bool QWindowSystemInterface::flushWindowSystemEvents(QEventLoop::ProcessEventsFlags flags)
{
    const int count = QWindowSystemInterfacePrivate::windowSystemEventQueue.count();
    if (!count)
        return false;
    if (!QGuiApplication::instance()) {
        qWarning().nospace()
            << "QWindowSystemInterface::flushWindowSystemEvents() invoked after "
               "QGuiApplication destruction, discarding " << count << " events.";
        QWindowSystemInterfacePrivate::windowSystemEventQueue.clear();
        return false;
    }
    if (QThread::currentThread() != QGuiApplication::instance()->thread()) {
        // Post a FlushEvents event which will trigger a call back to
        // deferredFlushWindowSystemEvents from the Gui thread.
        QMutexLocker locker(&QWindowSystemInterfacePrivate::flushEventMutex);
        QWindowSystemInterfacePrivate::FlushEventsEvent *e = new QWindowSystemInterfacePrivate::FlushEventsEvent(flags);
        QWindowSystemInterfacePrivate::postWindowSystemEvent(e);
        QWindowSystemInterfacePrivate::eventsFlushed.wait(&QWindowSystemInterfacePrivate::flushEventMutex);
    } else {
        sendWindowSystemEvents(flags);
    }
    return QWindowSystemInterfacePrivate::eventAccepted.load() > 0;
}


QAbstractEventDispatcher

DispatcherWatcher